#!/usr/local/bin/julia

# Problem Statement
println("Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ")
println("ten pentagonal numbers are:")
println()
println("1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...")
println()
println("It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, ")
println("70 − 22 = 48, is not pentagonal.")
println()
println("Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference")
println("are pentagonal and D = |Pk − Pj| is minimised; what is the value of D?\n\n")

# Notes:
# The difference of adjacent k, j is a linearly increasing function. Two 
# adjacent numbers will produce a smaller diff than pentagonals with adjacency greater than 1  
# Also, Smaller pentagonals will produce a smaller diff. However, it's not guaranteed that
# a smaller diff of adjacency 2 or more will be smaller than a larger diff of adjacency 1. 
# Strategy: Compute first 1000 or so pentagonals then look for adjacents meeting condition, 
# if one is found, verify that there are no, 2 or more adjacency pentagonals below that value.

# Solution   
N = 10000
function main()
    f(n) = round(Int, n.*(3*n - 1)/2)
    P = f(1:N) 
    hits = []
    for k = 1:1000 # adjacency index
        println("Testing adjancies of $k")
        sum_ = P + f(k+1:N+k)
        diff_ = f(k+1:N+k) - P
        println("P:, $(extrema(P)), sum: $(extrema(sum_)), diff: $(extrema(diff_))")
        for j = 1:N
            if in(sum_[j], P) && in(diff_[j], P)
                push!(hits, (j, k))
                println("Hit: j, k = $j, $k")
            end
        end
    end
    println(hits)
end

@time main()
